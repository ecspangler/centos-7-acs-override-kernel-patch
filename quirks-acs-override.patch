diff --git a/drivers/pci/quirks.c b/drivers/pci/quirks.c
index 0369fb6..c7609f6 100644
--- a/drivers/pci/quirks.c
+++ b/drivers/pci/quirks.c
@@ -4135,6 +4135,106 @@
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_CHELSIO, PCI_ANY_ID,
 			 quirk_chelsio_T5_disable_root_port_attributes);
 
+static bool acs_on_downstream;
+static bool acs_on_multifunction;
+
+#define NUM_ACS_IDS 16
+struct acs_on_id {
+	      unsigned short vendor;
+			 	unsigned short device;
+};
+static struct acs_on_id acs_on_ids[NUM_ACS_IDS];
+static u8 max_acs_id;
+
+static __init int pcie_acs_override_setup(char *p)
+{
+			 	if (!p)
+			 		return -EINVAL;
+
+			 	while (*p) {
+			 		if (!strncmp(p, "downstream", 10))
+			 			acs_on_downstream = true;
+			 		if (!strncmp(p, "multifunction", 13))
+			 			acs_on_multifunction = true;
+			 		if (!strncmp(p, "id:", 3)) {
+			 			char opt[5];
+			 			int ret;
+			 			long val;
+
+			 			if (max_acs_id >= NUM_ACS_IDS - 1) {
+			 				pr_warn("Out of PCIe ACS override slots (%d)\n",
+			 						NUM_ACS_IDS);
+			 				goto next;
+			 			}
+
+			 			p += 3;
+			 			snprintf(opt, 5, "%s", p);
+			 			ret = kstrtol(opt, 16, &val);
+			 			if (ret) {
+			 				pr_warn("PCIe ACS ID parse error %d\n", ret);
+			 				goto next;
+			 			}
+			 			acs_on_ids[max_acs_id].vendor = val;
+			 		p += strcspn(p, ":");
+			 		if (*p != ':') {
+			 			pr_warn("PCIe ACS invalid ID\n");
+			 			goto next;
+			 			}
+
+			 			p++;
+			 			snprintf(opt, 5, "%s", p);
+			 			ret = kstrtol(opt, 16, &val);
+			 			if (ret) {
+			 				pr_warn("PCIe ACS ID parse error %d\n", ret);
+			 				goto next;
+			 			}
+			 			acs_on_ids[max_acs_id].device = val;
+			 			max_acs_id++;
+			 		}
+			 next:
+			 		p += strcspn(p, ",");
+			 		if (*p == ',')
+			 			p++;
+			 	}
+
+			 	if (acs_on_downstream || acs_on_multifunction || max_acs_id)
+			 		pr_warn("Warning: PCIe ACS overrides enabled; This may allow non-IOMMU protected peer-to-peer DMA\n");
+
+			 	return 0;
+			 }
+			 early_param("pcie_acs_override", pcie_acs_override_setup);
+
+			 static int pcie_acs_overrides(struct pci_dev *dev, u16 acs_flags)
+			 {
+			 	int i;
+
+			 	/* Never override ACS for legacy devices or devices with ACS caps */
+			 	if (!pci_is_pcie(dev) ||
+			 		pci_find_ext_capability(dev, PCI_EXT_CAP_ID_ACS))
+			 			return -ENOTTY;
+
+			 	for (i = 0; i < max_acs_id; i++)
+			 		if (acs_on_ids[i].vendor == dev->vendor &&
+			 			acs_on_ids[i].device == dev->device)
+			 				return 1;
+
+			 switch (pci_pcie_type(dev)) {
+			 	case PCI_EXP_TYPE_DOWNSTREAM:
+			 	case PCI_EXP_TYPE_ROOT_PORT:
+			 		if (acs_on_downstream)
+			 			return 1;
+			 		break;
+			 	case PCI_EXP_TYPE_ENDPOINT:
+			 	case PCI_EXP_TYPE_UPSTREAM:
+			 	case PCI_EXP_TYPE_LEG_END:
+			 	case PCI_EXP_TYPE_RC_END:
+			 		if (acs_on_multifunction && dev->multifunction)
+			 			return 1;
+			 	}
+
+			 	return -ENOTTY;
+}
+
 /*
  * AMD has indicated that the devices below do not support peer-to-peer
  * in any system where they are found in the southbridge with an AMD
@@ -4343,6 +4443,7 @@
 	{ PCI_VENDOR_ID_ATI, 0x439d, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_ATI, 0x4384, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_ATI, 0x4399, pci_quirk_amd_sb_acs },
+	{ PCI_ANY_ID, PCI_ANY_ID, pcie_acs_overrides },
 	{ PCI_VENDOR_ID_AMD, 0x780f, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_AMD, 0x7809, pci_quirk_amd_sb_acs },
 	{ PCI_VENDOR_ID_SOLARFLARE, 0x0903, pci_quirk_mf_endpoint_acs },
